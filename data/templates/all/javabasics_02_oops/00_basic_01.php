
<div class="appQuestion"><b>13. What are the main principles of Object Oriented Programming?</b></div>
<div class="list-group">
<div class="list-group-item appAnswer">
<!-- Answer ::: START -->
Main principles of Object Oriented Programming (OOPS) are:
<ol>
<li>Abstraction</li>
<li>Encapsulation</li>
<li>Inheritance</li>
<li>Polymorphism</li>
</ol>
<!-- Answer ::: END -->
</div>
</div>

<div class="appQuestion"><b>14. What is the difference between Object Oriented Programming language and Object Based Programming language?</b></div>
<div class="list-group">
<div class="list-group-item appAnswer">
<!-- Answer ::: START -->
<ul>
<li>Object Oriented Programming languages like Java and C++ follow concepts of OOPS like- Encapsulation, Abstraction, Polymorphism and Inheritance etc.</li>
<li>Object Based Programming languages follow some features of OOPS but they do not provide support for Polymorphism and Inheritance.<br/>
Egg. JavaScript, VBScript etc.</li>
<li>Object Based Programming languages provide support for Objects and you can build objects from constructor. They languages also support Encapsulation. 
These are also known as Prototype-oriented languages.</li>
</ul>
<!-- Answer ::: END -->
</div>
</div>

<div class="appQuestion"><b>15. In Java what is the default value ofan object reference defined as aninstance variable in an Object?</b></div>
<div class="list-group">
<div class="list-group-item appAnswer">
<!-- Answer ::: START -->
All the instance variable object references in Java are <code><b>null</b></code>.
<!-- Answer ::: END -->
</div>
</div>

<div class="appQuestion"><b>16. Why do we need constructor in Java?</b></div>
<div class="list-group">
<div class="list-group-item appAnswer">
<!-- Answer ::: START -->
Java is an object-oriented language, in which we create and use objects. A constructor is a piece of code similar to a method. It is used to create an 
object and set the initial state of the object.<br/><br/> 
A constructor is a special function that has same name as classname.<br/><br/> 
Without a constructor, there is no other way to create an object.<br/><br/> 
By default, Java provides a default constructor for every object. If we overload a constructor then we have to implement default constructor.
<!-- Answer ::: END -->
</div>
</div>

<div class="appQuestion"><b>17. Why do we need default constructor in Java classes?</b></div>
<div class="list-group">
<div class="list-group-item appAnswer">
<!-- Answer ::: START -->
Default constructor is the no-argument constructor that is automatically generated by Java if no other constructor is defined.<br/><br/> 
Java specification says that it will provide a default constructor if there is no overloaded constructor in a class. But it does not say anything 
about the scenario in which we write an overloaded constructor in a class.<br/><br/> 
We need at least one constructor to create an object, thatâ€™s why Java provides a default constructor.<br/><br/> 
When we have overloaded constructor, then Java assumes that we want some custom treatment in our code. Due to which it does not provide default constructor. 
But it needs default constructor as per the specification. So it gives error.
<!-- Answer ::: END -->
</div>
</div>

<div class="appQuestion"><b>18. What is the value returned by Constructor in Java?</b></div>
<div class="list-group">
<div class="list-group-item appAnswer">
<!-- Answer ::: START -->
When we call a constructor in Java, it returns the object created by it. That is how we create new objects in Java.
<!-- Answer ::: END -->
</div>
</div>

<div class="appQuestion"><b>19. Can we inherit a Constructor?</b></div>
<div class="list-group">
<div class="list-group-item appAnswer">
<!-- Answer ::: START -->
No, Java does not support inheritance of constructor.
<!-- Answer ::: END -->
</div>
</div>

<div class="appQuestion"><b>20. Why constructors cannot be final,static, or abstract in Java?</b></div>
<div class="list-group">
<div class="list-group-item appAnswer">
<!-- Answer ::: START -->
If we set a method as final it means we do not want any class to override it. But the constructor(as per Java Language Specification) cannot be overridden. 
So there is no use of marking it final.<br/><br/> 
If we set a method as abstract it means that it has no body and it should be implemented in a child class. But the constructor is called implicitly when 
the new keyword is used. Therefore it needs a body.<br/><br/> 
If we set a method as static it means that it belongs to the class, but not a particular object. The constructor is always called to initializean 
object. Therefore, there is no use of marking constructor static.
<!-- Answer ::: END -->
</div>
</div>
